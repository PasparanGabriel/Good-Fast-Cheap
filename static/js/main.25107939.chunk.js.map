{"version":3,"sources":["store/reducers.js","store/actions.js","SliderBar/SliderBar.js","App/AppContainer.js","App/App.js","index.js"],"names":["initialState","selected","combination","SliderBar","props","onClick","name","sliderBar","className","type","checked","AppContainer","connect","updateSelectedOptions","value","dispatch","getState","newSelected","length","push","includes","splice","indexOf","updateSelected","store","createStore","state","action","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"wRAAMA,EAAe,CACnBC,SAAU,I,QCDNC,EAAc,CAClB,KAAQ,QACR,KAAQ,OACR,MAAS,QCCEC,G,MAAY,SAAAC,GAAU,IACzBC,EAA4BD,EAA5BC,QAASC,EAAmBF,EAAnBE,KAAML,EAAaG,EAAbH,SACjBM,EAAY,UAAYD,EAE9B,OACE,yBAAKE,UAAU,gBACb,yBAAKA,UAAU,gBACb,2BAAOA,UAAU,kBACf,2BAAOC,KAAK,WAAWJ,QAASA,EAASK,QAAST,IAClD,0BAAMO,UAAWD,MAGrB,yBAAKC,UAAU,sBACZF,MCTIK,G,MAAeC,aAJJ,SAAC,GAAD,MAAmB,CACzCX,SADsB,EAAGA,YAI0B,CAAEY,sBFGlB,SAAAC,GAAK,OAAI,SAACC,EAAUC,GAAc,IAC7Df,EAAae,IAAbf,SACFgB,EAAW,YAAOhB,GAEG,IAAvBgB,EAAYC,OACdD,EAAYE,KAAKL,GAEU,IAAvBG,EAAYC,QAAgBD,EAAY,KAAOH,EACjDG,EAAYE,KAAKL,GAEU,IAAvBG,EAAYC,QAAiBD,EAAYG,SAASlB,EAAYY,KAC9DG,EAAY,KAAOH,GAASG,EAAY,KAAOH,IACjDG,EAAYI,OAAOJ,EAAYK,QAAQpB,EAAYY,IAAS,GAC5DG,EAAYE,KAAKL,IAKvBC,EAvBqB,SAAAd,GAAQ,MAAK,CAClCQ,KAAM,kBACNK,MAAOb,GAqBEsB,CAAeN,OErBEL,ECJT,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,sBAAuBZ,EAAe,EAAfA,SAC3C,OACE,yBAAKO,UAAU,gBACb,yBAAKA,UAAU,wBACb,kBAAC,EAAD,CACEF,KAAK,OACLD,QAAS,kBAAMQ,EAAsB,SACrCZ,SAAUA,EAASmB,SAAS,UAE9B,kBAAC,EAAD,CACEd,KAAK,OACLD,QAAS,kBAAMQ,EAAsB,SACrCZ,SAAUA,EAASmB,SAAS,UAE9B,kBAAC,EAAD,CACEd,KAAK,QACLD,QAAS,kBAAMQ,EAAsB,UACrCZ,SAAUA,EAASmB,SAAS,iBCZhCI,EAAQC,uBLLe,WAAmC,IAAlCC,EAAiC,uDAAzB1B,EAAc2B,EAAW,uCAC7D,OAAQA,EAAOlB,MACb,IAAK,kBACH,OAAO,eACFiB,EADL,CAEEzB,SAAU0B,EAAOb,QAGrB,QACE,OAAOY,KKJ4BE,8BAAoBC,0BAAgBC,OAE7EC,IAASC,OACP,kBAAC,IAAD,CAAUR,MAAOA,GACf,kBAAC,EAAD,OAEAS,SAASC,eAAe,W","file":"static/js/main.25107939.chunk.js","sourcesContent":["const initialState = {\r\n  selected: []\r\n};\r\n\r\nexport const sliderReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_SELECTED':\r\n      return {\r\n        ...state, \r\n        selected: action.value\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const combination = {\r\n  'good': 'cheap',\r\n  'fast': 'good',\r\n  'cheap': 'fast'\r\n};\r\n\r\nconst updateSelected = selected => ({\r\n  type: 'CHANGE_SELECTED',\r\n  value: selected\r\n});\r\n\r\nexport const updateSelectedOptions = value => (dispatch, getState) => {  \r\n  const { selected } = getState();\r\n  const newSelected = [...selected];\r\n\r\n  if (newSelected.length === 0) {\r\n    newSelected.push(value);\r\n  } else {\r\n    if (newSelected.length === 1 && newSelected[0] !== value) {\r\n      newSelected.push(value);\r\n    } else {\r\n      if (newSelected.length === 2  && newSelected.includes(combination[value]) &&\r\n          newSelected[0] !== value && newSelected[1] !== value) {\r\n        newSelected.splice(newSelected.indexOf(combination[value]), 1);\r\n        newSelected.push(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  dispatch(updateSelected(newSelected));\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SliderBar.css';\r\n\r\nexport const SliderBar = props => {\r\n  const { onClick, name, selected } = props\r\n  const sliderBar = \"slider \" + name\r\n\r\n  return (\r\n    <div className=\"rowSliderBar\">\r\n      <div className=\"colSliderBar\">\r\n        <label className=\"labelSliderBar\">\r\n          <input type=\"checkbox\" onClick={onClick} checked={selected} />\r\n          <span className={sliderBar} />\r\n        </label>\r\n      </div>\r\n      <div className=\"colSliderBar right\">\r\n        {name}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nSliderBar.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  selected: PropTypes.bool.isRequired\r\n}\r\n","import { connect } from 'react-redux';\r\nimport { updateSelectedOptions } from '../store/actions';\r\nimport { App } from './App';\r\n\r\nconst mapStateToProps = ({ selected }) => ({\r\n  selected\r\n});\r\n\r\nexport const AppContainer = connect(mapStateToProps, { updateSelectedOptions })(App)\r\n","import React from 'react';\r\nimport { SliderBar } from '../SliderBar';\r\nimport './App.css';\r\n\r\nexport const App = ({ updateSelectedOptions, selected }) => {\r\n  return (\r\n    <div className=\"containerApp\">\r\n      <div className=\"centeredContainerApp\">\r\n        <SliderBar\r\n          name=\"good\"\r\n          onClick={() => updateSelectedOptions('good')}\r\n          selected={selected.includes('good')}\r\n        />\r\n        <SliderBar\r\n          name=\"fast\"\r\n          onClick={() => updateSelectedOptions('fast')}\r\n          selected={selected.includes('fast')}\r\n        />\r\n        <SliderBar\r\n          name=\"cheap\"\r\n          onClick={() => updateSelectedOptions('cheap')}\r\n          selected={selected.includes('cheap')}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport { sliderReducer } from './store/reducers';\r\nimport { App } from './App';\r\n\r\nconst store = createStore(sliderReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  , document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}